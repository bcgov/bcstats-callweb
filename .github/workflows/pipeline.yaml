name: Continuous Delivery
run-name: CD Release ${{ inputs.target_revision }}

on:
  workflow_dispatch:
    inputs:
      target_revision:
        description: 'Revision from tenant-gitops-af9df1'
        required: false
        default: ''
      callweb_image_tag:
        description: 'Image Tag from bcstats-servers-mgmt'
        required: false
        default: ''

env:
  ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
  ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}

jobs:
  initiate:
    runs-on: ubuntu-latest
    steps:
    - name: build
      run: |
        echo "### Helm Manifest ${{ inputs.target_revision }}" >> $GITHUB_STEP_SUMMARY

  image-tag:
    if: inputs.callweb_image_tag != ''
    name: "Update image tag"
    runs-on: 'ubuntu-latest'
    environment: 'dev'
    needs: initiate
    steps:
    - name: Install argocd cli
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
    - name: Patch
      shell: bash
      run: |
        for app in admin-dev callweb-dev
        do
          argocd app set $app \
            --grpc-web \
            --helm-set callweb.image.tag=${{ inputs.callweb_image_tag }}
            # --helm-set callweb.extraContainers[0].image=artifacts.developer.gov.bc.ca/aaf9-docker/bcstats-callweb:${{ inputs.callweb_image_tag }}
        done

  deploy-dev:
    name: "Deploy to dev"
    runs-on: 'ubuntu-latest'
    environment: 'dev'
    needs: [ initiate, image-tag ]
    if: always()
    steps:
    - name: Install argocd cli
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
    - name: Patch
      shell: bash
      run: |
        for app in admin-dev aps-gateway-dev callweb-dev minio-dev mysql-dev
        do
          argocd app patch $app \
            --grpc-web \
            --patch '{"spec": { "source": { "targetRevision": "${{ inputs.target_revision }}" } }}' \
            --type merge
        done
    - name: Sync
      run: |
        argocd app sync --grpc-web --timeout 300 -l env=dev
    - name: Wait
      run: |
        argocd app wait --grpc-web --timeout 300 -l env=dev
    - name: Report
      run: |
        (echo '<pre>'; argocd --grpc-web app list -l env=dev; echo '</pre>') >> $GITHUB_STEP_SUMMARY

  test-automation:
    name: "Test Automation"
    runs-on: 'ubuntu-latest'
    environment: 'dev'
    needs: [deploy-dev]
    steps:
    - name: deploy
      run: |
        echo "do test automation - consider it happy!"
        echo "Test automation not implemented yet" >> $GITHUB_STEP_SUMMARY

  deploy-test:
    name: "Deploy to test"
    runs-on: 'ubuntu-latest'
    environment: 'test'
    needs: deploy-dev
    steps:
    - name: Install argocd cli
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
    - name: Patch
      shell: bash
      run: |
        for app in admin-test mysql-test
        do
          argocd app patch $app \
            --grpc-web \
            --patch '{"spec": { "source": { "targetRevision": "${{ inputs.target_revision }}" } }}' \
            --type merge
        done
    - name: Sync
      run: |
        argocd app sync --grpc-web --timeout 300 -l env=test
    - name: Wait
      run: |
        argocd app wait --grpc-web --timeout 300 -l env=test
    - name: Report
      run: |
        (echo '<pre>'; argocd --grpc-web app list -l env=test; echo '</pre>') >> $GITHUB_STEP_SUMMARY

  deploy-prod:
    name: "Deploy to prod"
    runs-on: 'ubuntu-latest'
    environment: 'prod'
    needs: [test-automation, deploy-test]
    steps:
    - name: deploy
      run: |
        echo "deployed to prod!"
